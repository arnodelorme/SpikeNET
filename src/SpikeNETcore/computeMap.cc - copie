{

    int             j, k, l;
    coord           *tmp_spike;
    coord           *tmp_spike2;
    poidsLine       *tmp_poids;
    poidsLine       *tmp_poids_line;
    int             tmp_size;
    short			tmp_offset;
    //short           *tmp_state;
    short  		*tmp_state;
    short           tmp_zoom_afferent;
    short           tmp_zoom_real;
#if LARGE_MAPS == OUI
    unsigned int    tmp_pos;
    unsigned int    tmp_neur;
#else
    unsigned short  tmp_pos;
    unsigned short  tmp_neur;
#endif
    unsigned char   tmp_conv_lock;
    unsigned short  *tmp_tab_offset;
    FORMAT_POIDS    *tmp_val;
    FORMAT_COMPUTE  *tab_modulation_tmp; // lecture du tableau a l'envers
    poids_array_MMX *tmp_tab_tab_poids;
	coord_array		*output_list;
	
	int				mapMissingInGroup = 0;

	// output    
    output_list = spike_list.getNext();
    tmp_spike2 = output_list->array;
    tmp_size   = output_list->size;

    // application de toutes les convolutions
    while((mapTreated < map_group.nb_aff) && !mapMissingInGroup)
    {
    	//mapTreated = mapTreatedTmp;
        int groupeTreated = map_group.groupe[mapTreated];
	    tab_modulation_tmp = map_group.tab_modulation[groupeTreated] + map_group.relevant_afferences[groupeTreated];

   		//while ((groupeTreated == map_group.groupe[mapTreated]) && (mapTreated < map_group.nb_aff))

        if (map_group.carte_aff[mapTreated]->spike_list.getSpikeList( 0 ) == NULL)
            mapMissingInGroup = 1;
        
        if (nbLooping++ > 1000000)
            {
                nbLooping = 1;
                printf("hey unterminated computation from %s in map %s - computed:%d temps:%d\n", 
                       map_group.carte_aff[mapTreated]->get_name(), name, map_group.carte_aff[mapTreated]->temps, temps);
            }   
        /*while (map_group.carte_aff[mapTreated]->current_list == NULL)
            {
                looping++;
            }*/
           //if (((double)rand()/RAND_MAX) > 0.0001)
            //    printf("hey unterminated computation from %s in map %s\n", map_group.carte_aff[mapTreated-1]->get_name(), name);
            /*{ 
                //mapTreated++; 
                mapMissingInGroup = 1; 
                //printf("hey unterminated computation from %s in map %s\n", map_group.carte_aff[mapTreatedTmp-1]->get_name(), name);
            }*/

        //else break;
   		if (!mapMissingInGroup)	
            while ((groupeTreated == map_group.groupe[mapTreated]) && (mapTreated < map_group.nb_aff))
                {  					        
                    // scanne les cartes
                    tmp_spike = map_group.carte_aff[ mapTreated ]->spike_list.getSpikeList( 0 )->array;
                    
                    tmp_state = state[ groupeTreated ];
                    tmp_zoom_afferent = map_group.zoom_afferent[ mapTreated ];
                    tmp_zoom_real     = (1 << tmp_zoom_afferent);
                    if (tmp_zoom_afferent < 0) tmp_zoom_real = 1;

                    tmp_tab_tab_poids = map_group.tab_tab_poids[ mapTreated ];
                    tmp_conv_lock     = tmp_tab_tab_poids->getConvLock();
                    //printf("taille spike:%d\n", liste_in[ carte_from.array[i] ]->size);
                    
                    for (int u=0; u< tmp_tab_tab_poids->getNbLatency(); u++)
                       for (j=0; j<map_group.carte_aff[mapTreated]->spike_list.getSpikeList( tmp_tab_tab_poids->getLatency( u ) )->size; j++)
                          { //scanne les spikes de cette carte
                            if (tmp_zoom_afferent >=0)
                                tmp_pos    = offset_debut + (tmp_spike->x >>  tmp_zoom_afferent) + (tmp_spike->y >>  tmp_zoom_afferent) * largeur_tot;
                            else tmp_pos    = offset_debut + (tmp_spike->x << -tmp_zoom_afferent) + (tmp_spike->y << -tmp_zoom_afferent) * largeur_tot;
                            tmp_offset = (tmp_spike->x % tmp_zoom_real) + ((tmp_spike->y % tmp_zoom_real) <<  tmp_zoom_afferent);
                            
                            if (tmp_tab_tab_poids->getDuplicator())	
                                 tmp_poids = (poidsLine *)((char *)tmp_tab_tab_poids->getZoomOffset(tmp_offset, u) + tmp_pos * tmp_tab_tab_poids->getSizeTabPoidsLine());
                            else tmp_poids = tmp_tab_tab_poids->getZoomOffset( tmp_offset, u);
                            tmp_tab_offset = tmp_tab_tab_poids->getTabZoomOffset( tmp_offset);
                            
                            for (k = tmp_tab_tab_poids->getNbLines(tmp_offset); k>0 ; k--)
                                {
                                    tmp_poids_line = (poidsLine *)((char *)tmp_poids + tmp_tab_offset[k-1]);
                                    tmp_neur = tmp_pos + tmp_poids_line->offset;
                                    tmp_val  = &(tmp_poids_line->firstPoids);
                                    
                                    for (l=tmp_poids_line->taille; l>0; l--)//, tmp_neur++)
                                        { //scanne les poids de la convolution
                                            if (tmp_state[tmp_neur] > 0)
                                                {
#if DEBUG == OUI
                                                    int x = tmp_neur % largeur_tot;
                                                    int y = tmp_neur / largeur_tot;
                                                    if (((x<border_l) || (x>=(border_l+largeur_norm))) ||
                                                        ((y<border_h) || (y>=(border_h+hauteur_norm))))
                                                        { printf("Error : map %s %dx%d coord %d-%d(%d)\n", name, largeur_tot, hauteur_tot, x, y, tmp_neur); exit(-1); }
                                                    int spike_x = (tmp_spike->x >> tmp_zoom_afferent); if (tmp_zoom_afferent < 0) spike_x = (tmp_spike->x << -tmp_zoom_afferent);
                                                    int spike_y = (tmp_spike->y >> tmp_zoom_afferent); if (tmp_zoom_afferent < 0) spike_y = (tmp_spike->y << -tmp_zoom_afferent);
                                                    if ((spike_x < 0) || (spike_y < 0) || (spike_x >= largeur_norm) || (spike_y >= hauteur_norm))
                                                        { printf("Spike Error : map %s %dx%d pos %d-%d(%d) zoom %d\n",
                                                                 name, largeur_norm, hauteur_norm, spike_x, spike_y, tmp_neur, tmp_zoom_afferent); exit(-1); }
#endif
                                                    if (this->test_seuil(tmp_neur, tab_modulation_tmp, tmp_state, tmp_val) > seuil)
                                                        {
                                                            // add the neuron only once
                                                            if (!(nb_decharge_from[tmp_neur]++))
                                                                tab_modified_MMX[ tab_modified_MMX_size++ ] = tmp_neur;
                                                            
#if DEBUG == OUI
                                                            if ((tmp_spike2->x >= largeur_norm) || (tmp_spike2->y >= hauteur_norm))
                                                                { printf("Spike Error : map %s %dx%d pos %d-%d(%d) act %d mod %d state %d \ncarte %s groupe %s convo %s\n",
                                                                         name, largeur_norm, hauteur_norm, tmp_spike2->x, tmp_spike2->y, tmp_neur, activite[tmp_neur], 
                                                                         *(tab_modulation_tmp - ++tmp_state[tmp_neur]), tmp_state[tmp_neur], map_group.carte_aff[mapTreated-1]->get_name(), map_group.name[groupeTreated], map_group.tab_tab_poids[mapTreated-1]->getFileName()); exit(-1); }
                                                            if ((tmp_size+1) > MAX_SPIKE)
                                                                do_error ("Error : MAX_SPIKE overflow in map %s\n", name, 1);
#endif
                                                        }
                                                }
                                            tmp_val  ++;
                                            tmp_neur ++;
                                        }
                                }
                            tmp_spike++;
                        }
                    mapTreated++; //carte suivante
                }
	}

	if (!mapMissingInGroup)
	{
		//check neurons for discharge
		for (int i=0; i<tab_modified_MMX_size; i++)
		{
			if ( activite[ tmp_neur = tab_modified_MMX[ i ]  ] > seuil)
			{
		    	tmp_spike2->x = tab_x[tmp_neur];
		    	tmp_spike2->y = tab_y[tmp_neur];
 		    	tmp_spike2++;
		    	tmp_size++;					// this figure is redundant 
 		    	for (l = map_group.nb_groupes-1; l >= 0; l--) *(state[l]+tmp_neur) = 0; //-map_group.relevant_afferences[l]; //considere le total
	    		activite[tmp_neur] = temps;
			}
			else //do_error err("Error : spike removed \n", NULL, 1);
			nb_decharge_from[tmp_neur] = 0;
		}
	
		tab_modified_MMX_size = 0;
		output_list->size  = tmp_size;
    	ordre_decharge += tmp_size;
		// swap spike_list ------------ care : parrallelisation problem -> need synchronisation
		//current_list = output_list;
		temps++;
		
		//if (current_list == &tab_spike1) tab_spike2.size = 0; else tab_spike1.size = 0;
		mapTreated = 0;
        nbLooping = 0;
        
		return 1;
	}
    else return 0;

};

// *************************************************************************************************
// *****************************************  slow version   ***************************************
// *************************************************************************************************
 
//void carte::compute_all()
/*{

    int             i, j, k, l;
    coord           *tmp_spike;
    poidsLine       *tmp_poids;
    poidsLine       *tmp_poids_line;
    int             tmp_size;
    short			tmp_offset;
    short           *tmp_state;
    short           tmp_zoom_afferent;
    short           tmp_zoom_real;
#if LARGE_MAP == OUI
    unsigned int    tmp_pos;
    unsigned int    tmp_neur;
#else
    unsigned short  tmp_pos;
    unsigned short  tmp_neur;
#endif
    unsigned char   tmp_conv_lock;
    unsigned short  *tmp_tab_offset;
    FORMAT_POIDS    *tmp_val;
    FORMAT_COMPUTE  current_modulation;
    FORMAT_COMPUTE  *tab_modulation_tmp; // lecture du tableau a l'envers
    FORMAT_COMPUTE  *tab_modulation_cumul_tmp;
    poids_array_MMX *tmp_tab_tab_poids;
	coord_array		*output_list;

	// initialisation de la sortie
	if (current_list == &tab_spike1) output_list = &tab_spike2; else output_list = &tab_spike1;
	output_list->size = 0;

    // application de toutes les convolutions
    i=0;
    while(i<map_group.nb_aff)
    { 
        int groupe = map_group.groupe[i];
   		while ((groupe == map_group.groupe[i]) && (i < map_group.nb_aff))
  		{
  					        
        	// scanne les cartes
            tmp_spike = map_group.carte_aff[i]->current_list->array;
            tmp_state = state[ groupe ];
            tmp_zoom_afferent = map_group.zoom_afferent[i];
            tmp_zoom_real     = (1 << tmp_zoom_afferent);
            if (tmp_zoom_afferent < 0) tmp_zoom_real = 1;
	    	tmp_tab_tab_poids = map_group.tab_tab_poids[i];
	    	tmp_conv_lock     = tmp_tab_tab_poids->getConvLock();
            
            for (j=0; j<map_group.carte_aff[i]->current_list->size; j++)
                { //scanne les spikes de cette carte
		  			tmp_pos    = offset_debut + (tmp_spike->x >> tmp_zoom_afferent) + (tmp_spike->y >> tmp_zoom_afferent) * largeur_tot;
					tmp_offset = (tmp_spike->x % tmp_zoom_real) + ((tmp_spike->y % tmp_zoom_real) <<  tmp_zoom_afferent);
					
		  			//if (tmp_conv_lock)
		       		//tmp_poids = tmp_tab_tab_poids->tabPoidsLine[0];
		       		tmp_poids 		  = tmp_tab_tab_poids->getZoomOffset(tmp_offset);
	    			tmp_tab_offset    = tmp_tab_tab_poids->getTabZoomOffset(tmp_offset);
		       		//if (tmp_offset != 0) { do_error err("Error : tmp_offset different de 0\n", NULL, 1); }
		  			//else tmp_poids = (poidsLine *)((char *)tmp_tab_tab_poids->allTabPoidsLine + tmp_pos * tmp_tab_tab_poids->sizeTabPoidsLine);
		    
		  			for (k = tmp_tab_tab_poids->getNbLines(tmp_offset); k>0 ; k--)
		    		{
		      			tmp_poids_line = (poidsLine *)((char *)tmp_poids + tmp_tab_offset[k-1]);
		      			tmp_neur = tmp_pos + tmp_poids_line->offset;
		      			tmp_val  = &(tmp_poids_line->firstPoids);
		      
		      			for (l=tmp_poids_line->taille; l>0; l--)
						{ //scanne les poids de la convolution
			  				if (tmp_state[tmp_neur] > 0)
			    			{
		    					#if DEBUG == OUI
			      				int x = tmp_neur % largeur_tot;
			      				int y = tmp_neur / largeur_tot;
				  				if (((x<border_l) || (x>=(border_l+largeur_norm))) ||
	    							((y<border_h) || (y>=(border_h+hauteur_norm))))
			        			{ printf("Error : map %s %dx%d coord %d-%d(%d)\n", name, largeur_tot, hauteur_tot, x, y, tmp_neur); exit(-1); }
		    					int spike_x = (tmp_spike->x >> tmp_zoom_afferent);
		    					int spike_y = (tmp_spike->y >> tmp_zoom_afferent);
		    					if ((spike_x < 0) || (spike_y < 0) || (spike_x >= largeur_norm) || (spike_y >= hauteur_norm))
		    						{ printf("Spike Error : map %s %dx%d pos %d-%d(%d) zoom %d\n",
		    						name, largeur_norm, hauteur_norm, spike_x, spike_y, tmp_neur, tmp_zoom_afferent); exit(-1); }
								#endif
								
			      				act_tmp[tmp_neur] += *tmp_val;
			      				if (!(nb_decharge_from[tmp_neur]++))
									tab_modified_MMX[ tab_modified_MMX_size++ ] = tmp_neur;
			    			}
			  				tmp_val  ++;
			  				tmp_neur ++;
						}
		    		}
		  			tmp_spike++;
				}
			i++; //carte suivante
   	}
	    	
		#if DEBUG == OUI
		if (tab_modified_MMX_size > MAX_MODIFIED)
			do_error ("Error : MAX_MODIFIED overflow in map %s\n", name, 1);
		#endif
	    	
	    // scanne tous les neurones ayant ete touches
	    tmp_size  = output_list->size;
	    tmp_spike = output_list->array + tmp_size;
	    tab_modulation_tmp = map_group.tab_modulation[groupe] + map_group.relevant_afferences[groupe];
	    tab_modulation_cumul_tmp = map_group.tab_modulation_cumul[groupe];
    
	    for (j=0; j<tab_modified_MMX_size; j++)
	    {
			tmp_neur = tab_modified_MMX[j];
		
			// modulation divise par deux 
			//current_modulation  = *(tab_modulation_tmp - tmp_state[tmp_neur] + (nb_decharge_from[tmp_neur] >> 1)); 
		    // modulation reele 
		    current_modulation  = (FORMAT_COMPUTE) ((int)*(tab_modulation_tmp - tmp_state[tmp_neur]) * tab_modulation_cumul_tmp[nb_decharge_from[tmp_neur] - 1]) >> RENORM;


			tmp_state[tmp_neur] -=  nb_decharge_from[tmp_neur];
			nb_decharge_from[tmp_neur] 	= 0;
		
			#if COMPUTE_CUT == OUI
				activite[tmp_neur] += (FORMAT_COMPUTE) ( (int)act_tmp[tmp_neur] * current_modulation );
			#else
				activite[tmp_neur] += (FORMAT_COMPUTE) ( (int)act_tmp[tmp_neur] * current_modulation >> RENORM );
			#endif
							
			#if DEBUG == OUI
 			if (((int)act_tmp[tmp_neur] * current_modulation >> RENORM) > ((1 << (8*sizeof(FORMAT_COMPUTE)-1))-1))
 				do_error err("Error : Arithmetic overflow in activity calculationin map %s\n", name, 1);
			            
			if (abs(activite[tmp_neur]) > 5000000000)
				{ printf("erreur activite %s %d tmp %d mod %d pos %d state %d groupe %d\n", name, activite[tmp_neur], act_tmp[tmp_neur], 
					current_modulation, tmp_neur, tmp_state[tmp_neur], groupe); exit(-1); }
			#endif
			
			act_tmp[tmp_neur]			= 0;
		
			//if (activite[tmp_neur] > threshold[tmp_neur])
			if (activite[tmp_neur] > seuil)
		  	{
		    	tmp_spike->x = tab_x[tmp_neur];
		    	tmp_spike->y = tab_y[tmp_neur];
		    	#if DEBUG == OUI
		    	if ((tmp_spike->x < 0) || (tmp_spike->y < 0) || (tmp_spike->x >= largeur_norm) || (tmp_spike->y >= hauteur_norm))
		    		{ printf("Spike Error : map %s %dx%d pos %d-%d(%d) act %d mod %d state %d \ncarte %s groupe %s convo %s\n",
		    			name, largeur_norm, hauteur_norm, tmp_spike->x, tmp_spike->y, tmp_neur, activite[tmp_neur], 
					current_modulation, tmp_state[tmp_neur], map_group.carte_aff[i-1]->name, map_group.name[groupe], map_group.tab_tab_poids[i-1]->fileName); exit(-1); }
				if ((tmp_size+1) > MAX_SPIKE)
					do_error ("Error : MAX_SPIKE overflow in map %s\n", name, 1);
				#endif
 		    	for (l=0; l < map_group.nb_groupes; l++) state[l][tmp_neur] = -map_group.relevant_afferences[l]; //considere le total
		                                                     // + state[l][tmp_neur]; // signifie qu'il a decharge
 		    	tmp_spike++;
		    	tmp_size++;
	    		activite[tmp_neur] = 0;
		  	}
	     }

	    
	    tab_modified_MMX_size = 0;
	    output_list->size  = tmp_size;
    	ordre_decharge += tmp_size;
	}
	// swap spike_list ------------ care : parrallelisation problem -> need synchronisation
	current_list = output_list;
};*/
